// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture2D<float> FurthestVisibleDistances;
RWTexture2D<uint> Result;
float2 RayOrigin;
float2 RayDirection;
float ViewAngle;
float ViewDistance;
int NumRaysPerDegree;
int RayTextureSize;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float halfViewAngle = ViewAngle / 2.0f;
    int numRays = ceil(ViewAngle * NumRaysPerDegree);
    float angleStep = ViewAngle / (float) (numRays - 1);

    float3 worldPos = i.worldPos.xyz;

    float2 toPixel = worldPos.xz - RayOrigin;
                        
    float2 normalizedToPixel = normalize(toPixel.xy);
    float2 normalizedRayDirection = normalize(RayDirection);

    float dotProduct = dot(normalizedToPixel, normalizedRayDirection);
    float angle = acos(dotProduct);

    int rayId = int((angle + halfViewAngle) / angleStep);
    float distance = length(toPixel.xy);
                        
    float2 rayTextureCoord = float2(rayId % (uint) RayTextureSize, rayId / (uint) RayTextureSize) / (uint) RayTextureSize;
    float furthestVisibleDistance = tex2D(_FurthestVisibleDistances, rayTextureCoord).r;
                        
    if (distance > furthestVisibleDistance)
    {
        return 127;
    }

    uint col = lerp(0.0f, 0.5f, distance / _ViewDistance) * 255;
    Result[id.xy] = col;
}
