#pragma kernel CSMain

//#define DEBUG_SHADER

struct RayDataStruct
{
    float2 rayOriginPixels;
    float2 rayDirection;

    float viewAngle;
    float maximumAmountOfStepsPerRay;
    float numRaysPerDegree;
    float height;

    float3 highlightCenter;
    float highlightAngle;
};


struct EchoPoint
{
    float2 currentPixelPosition;
    float2 currentDirection;
    
    float2 colorLerp;
    float lifespan;
    float height;
};



RWTexture2D<float2> FurthestVisibleDistances;
Texture2D<float> DepthMap;
RWTexture2D<float4> MainViewMask;
RWTexture2D<float2> EchoGrid;
StructuredBuffer<RayDataStruct> RayData;

int VisibilityMaskWidth;
int VisibilityMaskHeight;
int RayTextureSize;

int RayAmount;
int EchoAmount;

float MinAlpha;
float4x4 InvOrthoMatrix;
float3 CameraPosition;

float2x2 rotate(float angle)
{
    return float2x2(
        cos(angle), -sin(angle),
        sin(angle), cos(angle));
}

void ProcessRay(uint3 id, int rayDataId, float3 worldPos, inout float4 maskValue, float depth, inout int _RayIdOffset)
{
    float2 RayOriginPixels = RayData[rayDataId].rayOriginPixels;
    float2 RayDirection = RayData[rayDataId].rayDirection;
    
    float ViewAngle = RayData[rayDataId].viewAngle;
    float MaximumVisibleDistancePixels = RayData[rayDataId].maximumAmountOfStepsPerRay;
    float NumRaysPerDegree = RayData[rayDataId].numRaysPerDegree;
    float RayOriginHeight = RayData[rayDataId].height;
    
    float HighlightAngle = RayData[rayDataId].highlightAngle;
    float3 HighlightCenter = RayData[rayDataId].highlightCenter;
    
    float2 toPixel = (int2) id.xy - RayOriginPixels;
    float distance = length(toPixel.xy);
    
    uint numRays = ceil(ViewAngle * NumRaysPerDegree);
    uint rayIdOffset = _RayIdOffset;
    _RayIdOffset += numRays;
    
    if (RayOriginHeight > depth)
    {
        float t = dot(normalize(worldPos.xyz - CameraPosition), normalize(HighlightCenter - CameraPosition));
        if (t > HighlightAngle)
        {
            maskValue.z = 1 - (t - HighlightAngle) / HighlightAngle;
        }

    }
    
    
    float halfViewAngle = radians(ViewAngle / 2.0f);
    float angleStep = radians(ViewAngle) / (float) (numRays - 1);
    
    float2 normalizedToPixel = normalize(toPixel.xy);
    
    if (acos(dot(normalizedToPixel, RayDirection)) > halfViewAngle)
    {
        return;
    }
    float2 normalizedRayDirection = mul(rotate(-halfViewAngle), RayDirection);
    normalizedRayDirection = normalize(normalizedRayDirection);

    float dotProduct = dot(normalizedToPixel, normalizedRayDirection);
    float angle = acos(dotProduct);
    
    uint rayId = uint(round(angle / angleStep));
    if (rayId > numRays - 1)
    {
        return;
    }
    rayId += rayIdOffset;
    uint2 rayTextureCoord = uint2(rayId % (uint) RayTextureSize, rayId / (uint) RayTextureSize);
    float furthestVisibleDistance = FurthestVisibleDistances[rayTextureCoord].r;
    
    if (distance > furthestVisibleDistance)
    {
        return;
    }
    maskValue.y = lerp(0.1f, 1.0f,
        (
            dot(normalizedToPixel, RayDirection) - cos(halfViewAngle)
        ) / ( // -------------------------------
                    1.0f - cos(halfViewAngle)
        ) / MaximumVisibleDistancePixels * (MaximumVisibleDistancePixels - distance)
    );
    if (maskValue.x < 1.0f)
    {
        maskValue.x += maskValue.y / 32;
        if (maskValue.x > 1.0)
        {
            maskValue.x = 1.0;
        }
        return;
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float4 maskValue = float4(MainViewMask[id.xy].r, 0, 0, 0);
    
    float2 uv = float2(id.xy) / int2(VisibilityMaskWidth, VisibilityMaskHeight);
    uv = uv * 2.0f - 1.0f;
    float depth = DepthMap[id.xy];
    float4 worldPos = mul(InvOrthoMatrix, float4(uv, depth, 1.0f));
    worldPos /= worldPos.w;
    
    int rayIdOffset = 0;
    for (int i = 0; i < RayAmount; i++)
    {
        ProcessRay(id, i, worldPos.xyz, maskValue, depth, rayIdOffset);
    }
#ifdef DEBUG_SHADER
    maskValue.y = DepthMap[id.xy] - 0.4;
#endif
    if (!(maskValue.y > 0 || maskValue.z > 0))
    {
        maskValue.x = max(min(maskValue.x, 0.1f), maskValue.x - 0.005f);
    }
    maskValue.w = EchoGrid[id.xy].y;
    MainViewMask[id.xy] = maskValue;
}